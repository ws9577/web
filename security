# Check for Rootkits and Malware
sudo apt install chkrootkit rkhunter
sudo chkrootkit
sudo rkhunter --checkall

# Verify Package Integrity
sudo apt install debsums
sudo debsums -c

# Check update history: 
apk info -a | grep su
# Verify the file’s integrity:
apk verify coreutils

# Create a copy for analysis
sudo cp /usr/bin/[filename] /tmp/[filename]_infected

# Compare with the original package
dpkg -S /usr/bin/[filename]  # or rpm -qf for RPM systems
apt-get download [package_name]  # or yumdownloader for RPM systems
dpkg-deb -x [package_file.deb] clean_files/
diff -s /usr/bin/[filename] clean_files/usr/bin/[filename]

# Analyze differences
hexdump -C /usr/bin/[filename] > /tmp/[filename]_infected.hex
hexdump -C clean_files/usr/bin/[filename] > /tmp/[filename]_clean.hex
diff /tmp/[filename]_infected.hex /tmp/[filename]_clean.hex
--------------------------

# https://www.wordfence.com/docs/how-to-clean-a-hacked-wordpress-site-using-wordfence/

# all files that were modified during the last 2 days
find . -mtime -2 -ls
# Or you can specify a specific directory:
find /home/yourdirectory/yoursite/ -mtime -2 -ls
# Or you can change the search to show files modified in the last 10 days:
find /home/yourdirectory/yoursite/ -mtime -10 -ls

# Another useful tool in SSH is ‘grep’. For example, to search for files that reference base64 encoding(commonly used by hackers) you can run the following command:
grep -ril base64 *
# This will just list the file names. You can omit the ‘l’ option to see the actual contents of the file where the base64 string occurs:
grep -ri base64 *
# Keep in mind that “base64” can occur in legitimate code as well. Before you delete anything, you’ll want to make sure that you are not deleting a file that is being used by a theme or plugin on your site. A more refined search could look like this:
grep --include=*.php -rn . -e "base64_decode"
# This command will dig through all directories and subdirectories looking for files that end in .php and search them for the text string “base64_decode” and will print any results it finds including the line number so that you can easily find where it occurs in each file.
# Now that you know how to use ‘grep’, we recommend that you use grep in combination with ‘find’. What you should do is find files that were recently modified, see what was modified in the file and if you find a common string of text like “bad hacker was here” then you can just grep all your files for that text like so:
grep -irl "bad hacker was here" *

# Determine which script is performing the malicious redirect. Not all javascript on your site is malicious, in fact, most of the javascript you will find on your site is a part of core functionality.
# In Chrome, enter “view-source:” in front of the site’s URL (e.g., view-source:https://www.sitename.com) and search for “<script” within the file. You can look for what other code or text is close to the malicious script to determine which site file contains the malicious code.
# If it is a theme file, you can use your site’s theme editor to remove the offending javascript. Or you can download your site via FTP or your cpanel file manager and upload the cleaned file back to your server.

# Block specific domains associated with attacks
# website’s server configuration files (e.g., .htaccess for Apache servers)
<Limit GET HEAD POST>
    order allow,deny
    allow from all
    deny from 123.45.6.7
    deny from 123.45.6.0/24
</Limit>

# wordfence cli
apt install ./wordfence.deb
wp wordfence scan
wp wordfence scan report
wp wordfence update
wp wordfence repair

# If a rootkit is confirmed, it’s highly recommended to reinstall the operating system.
# Format the compromised server, reinstall the OS, and restore data from a clean backup.
# If reinstallation is not immediately feasible, try restoring system binaries from known good sources:
sudo apt-get --reinstall install coreutils
sudo apt-get --reinstall install shadow



# Add this code near the top of your wp-config.php file:
define('WP_LOGIN_ATTEMPTS', 5);

# Then, add this code to your theme's functions.php file:
function check_attempted_login($user, $username, $password) {
    if (get_transient('attempted_login')) {
        $datas = get_transient('attempted_login');
        if ($datas['tried'] >= WP_LOGIN_ATTEMPTS) {
            $until = get_option('_transient_timeout_' . 'attempted_login');
            $time = time_to_go($until);
            return new WP_Error('too_many_tried', sprintf(__('<strong>ERROR</strong>: You have reached authentication limit, you will be able to try again in %1$s.'), $time));
        }
    }
    return $user;
}
add_filter('authenticate', 'check_attempted_login', 30, 3);

function login_failed($username) {
    if (get_transient('attempted_login')) {
        $datas = get_transient('attempted_login');
        $datas['tried']++;
        if ($datas['tried'] <= WP_LOGIN_ATTEMPTS)
            set_transient('attempted_login', $datas, 300);
    } else {
        $datas = array(
            'tried' => 1
        );
        set_transient('attempted_login', $datas, 300);
    }
}
add_action('wp_login_failed', 'login_failed', 10, 1);

function time_to_go($timestamp) {
    $current = time();
    $diff = $timestamp - $current;
    $min = floor($diff / 60);
    $sec = $diff - ($min * 60);
    return sprintf('%d minutes and %d seconds', $min, $sec);
}


# automatically block IP addresses that make repeated unsuccessful or suspicious requests
# Fail2Ban
sudo apt-get install fail2ban  # For Debian-based systems
sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local

#Configure SSH Protection: Edit /etc/fail2ban/jail.local to add or modify the SSH jail
[sshd]
enabled = true
port = ssh
filter = sshd
logpath = /var/log/auth.log
maxretry = 5
bantime = 600

[wordpress]
enabled = true
filter = wordpress
logpath = /var/log/auth.log
maxretry = 3
bantime = 3600

------------------------------------
# Install and Secure PHP
sudo apt install php php-fpm php-mysql php-cli php-curl php-gd php-xml php-mbstring -y

# Secure PHP Configuration: Edit the /etc/php/X.X/fpm/php.ini 
expose_php = Off
memory_limit = 256M
post_max_size = 64M
upload_max_filesize = 64M
max_execution_time = 300
max_input_time = 1000
display_errors = Off

---------------------------
# WordPress Hardening
Security Keys: Generate and set unique security keys in wp-config.php from the WordPress secret key generator.

# Secure critical WordPress files and directories
sudo find /var/www/html/wordpress/ -type d -exec chmod 755 {} \;
sudo find /var/www/html/wordpress/ -type f -exec chmod 644 {} \;
sudo chmod 600 /var/www/html/wordpress/wp-config.php

# Disable File Editing in WordPress: Add this to wp-config.php 
define('DISALLOW_FILE_EDIT', true);

-------------------------------------

# Create a custom filter for WordPress
sudo nano /etc/fail2ban/filter.d/wordpress.conf
# Add this content:
[Definition]
failregex = ^<HOST>.*"POST .*wp-login.php
ignoreregex =


# Preserving Client IPs Using Reverse Proxy Configuration:
# To help the backend server identify the original client's IP address, you should configure the reverse proxy to pass the original IP. This is done using headers like X-Forwarded-For or X-Real-IP.
# For Nginx: Add or ensure the following directive is present in your Nginx configuration:
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Real-IP $remote_addr;


# backend log format
@ apache, /etc/apache2/apache2.conf, or sites-enabled
LogFormat "%{X-Forwarded-For}i %l %u %t \"%r\" %>s %b" forwarded_combined
ErrorLog ${APACHE_LOG_DIR}/error.log
CustomLog /var/log/apache2/access.log forwarded_combined
# nginx, /etc/nginx/nginx.conf
log_format main '$proxy_add_x_forwarded_for - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent"';
access_log /var/log/nginx/access.log main;


sudo systemctl restart fail2ban
sudo fail2ban-client status
# Check Status of a Specific Jail:
sudo fail2ban-client status sshd
# Unban an IP Address:
sudo fail2ban-client set sshd unbanip <IP_ADDRESS>


# WP plugin
Wordfence or Sucuri
Implement File Integrity Monitoring: Tools like Tripwire or OSSEC

# Scan for Other Potentially Malicious Files:
# ClamAV or Maldet
sudo apt-get install clamav
sudo freshclam
sudo clamscan -r /var/www/html

ps aux | grep freshclam
sudo chown -R clamav:clamav /var/log/clamav
sudo chmod -R 755 /var/log/clamav


