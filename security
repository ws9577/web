# Block specific domains associated with attacks
# websiteâ€™s server configuration files (e.g., .htaccess for Apache servers)
<Limit GET HEAD POST>
    order allow,deny
    allow from all
    deny from 123.45.6.7
    deny from 123.45.6.0/24
</Limit>

# Add this code near the top of your wp-config.php file:
define('WP_LOGIN_ATTEMPTS', 5);

# Then, add this code to your theme's functions.php file:
function check_attempted_login($user, $username, $password) {
    if (get_transient('attempted_login')) {
        $datas = get_transient('attempted_login');
        if ($datas['tried'] >= WP_LOGIN_ATTEMPTS) {
            $until = get_option('_transient_timeout_' . 'attempted_login');
            $time = time_to_go($until);
            return new WP_Error('too_many_tried', sprintf(__('<strong>ERROR</strong>: You have reached authentication limit, you will be able to try again in %1$s.'), $time));
        }
    }
    return $user;
}
add_filter('authenticate', 'check_attempted_login', 30, 3);

function login_failed($username) {
    if (get_transient('attempted_login')) {
        $datas = get_transient('attempted_login');
        $datas['tried']++;
        if ($datas['tried'] <= WP_LOGIN_ATTEMPTS)
            set_transient('attempted_login', $datas, 300);
    } else {
        $datas = array(
            'tried' => 1
        );
        set_transient('attempted_login', $datas, 300);
    }
}
add_action('wp_login_failed', 'login_failed', 10, 1);

function time_to_go($timestamp) {
    $current = time();
    $diff = $timestamp - $current;
    $min = floor($diff / 60);
    $sec = $diff - ($min * 60);
    return sprintf('%d minutes and %d seconds', $min, $sec);
}

# Add these lines to your .htaccess file:
<Files wp-login.php>
    Order Deny,Allow
    Deny from all
    Allow from xxx.xxx.xxx.xxx
</Files>

# Moving wp-login.php to a custom URL:
# Create a new PHP file (e.g., secret-login.php) in your WordPress root directory with this content:
<?php
require('wp-login.php');
# Then add this to your wp-config.php:
define('WP_ADMIN_DIR', 'wp-admin');
define('ADMIN_COOKIE_PATH', SITECOOKIEPATH . WP_ADMIN_DIR);

# And add this to your .htaccess:
RewriteEngine On
RewriteBase /
RewriteRule ^wp-login\.php$ - [L]
RewriteRule ^secret-login\.php$ wp-login.php [L]

# automatically block IP addresses that make repeated unsuccessful or suspicious requests
# Fail2Ban
sudo apt-get install fail2ban  # For Debian-based systems
sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local

#Configure SSH Protection: Edit /etc/fail2ban/jail.local to add or modify the SSH jail
[sshd]
enabled = true
port = ssh
filter = sshd
logpath = /var/log/auth.log
maxretry = 5
bantime = 600

[wordpress]
enabled = true
filter = wordpress
logpath = /var/log/auth.log
maxretry = 3
bantime = 3600

# Create a custom filter for WordPress
sudo nano /etc/fail2ban/filter.d/wordpress.conf
# Add this content:
[Definition]
failregex = ^<HOST>.*"POST .*wp-login.php
ignoreregex =


# Preserving Client IPs Using Reverse Proxy Configuration:
# To help the backend server identify the original client's IP address, you should configure the reverse proxy to pass the original IP. This is done using headers like X-Forwarded-For or X-Real-IP.
# For Nginx: Add or ensure the following directive is present in your Nginx configuration:
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Real-IP $remote_addr;


# backend log format
@ apache, /etc/apache2/apache2.conf, or sites-enabled
LogFormat "%{X-Forwarded-For}i %l %u %t \"%r\" %>s %b" forwarded_combined
ErrorLog ${APACHE_LOG_DIR}/error.log
CustomLog /var/log/apache2/access.log forwarded_combined
# nginx, /etc/nginx/nginx.conf
log_format main '$proxy_add_x_forwarded_for - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent"';
access_log /var/log/nginx/access.log main;


sudo systemctl restart fail2ban
sudo fail2ban-client status
# Check Status of a Specific Jail:
sudo fail2ban-client status sshd
# Unban an IP Address:
sudo fail2ban-client set sshd unbanip <IP_ADDRESS>


# WP plugin
Wordfence or Sucuri
Implement File Integrity Monitoring: Tools like Tripwire or OSSEC

# Scan for Other Potentially Malicious Files:
# ClamAV or Maldet
sudo apt-get install clamav
sudo freshclam
sudo clamscan -r /var/www/html

ps aux | grep freshclam
sudo chown -R clamav:clamav /var/log/clamav
sudo chmod -R 755 /var/log/clamav


